import groovy.json.*
buildscript {
    dependencies {
        classpath 'org.asciidoctor:asciidoctorj-diagram:1.5.4.1'
    }

}

//tag::jbakeplugin[]
plugins {
    id 'org.jbake.site' version '5.0.0'
}
//end::jbakeplugin[]

repositories {
    mavenCentral()
    jcenter()
}

//tag::jbakeconfig[]
jbake {
    version = '2.6.4'
    srcDirName = 'src/site'
    destDirName = 'docs/html5/site'
    configuration['asciidoctor.option.requires'] = "asciidoctor-diagram"
}
//end::jbakeconfig[]

//configure docToolchain to use the main project's config
project('docToolchain') {
    if (project.hasProperty('docDir')) {
        docDir = '../.'
        inputPath = 'docs'

        mainConfigFile = 'docToolchain.config'
    } else {
        println "="*80
        println "  please initialize the docToolchain submodule"
        println "  by executing git submodule update -i"
        println "="*80
    }
}

task generateIndex() {
    // this is ugly as obfuscated, but it works :-)
    doLast {
        def src = new File('.')

        def stats = [coders:0,languages:0,stars:[:],days:[]]
        // build up an index of all code
        def days = [:]
        def languages = [:]
        def coders = [:]
        src.eachFile { day ->
            if (day.name.startsWith('day')) {
                days[day.name]=[]
                day.eachFile { language ->
                    if (!language.isFile()) {
                        language.eachFile { coder ->
                            if (!coder.isFile()) {
                                if (!coders[coder.name]) {
                                    coders[coder.name]=[]
                                }
                                coders[coder.name] << ([day.name,language.name])
                                days[day.name] << ([coder.name, language.name])
                                if (!languages[language.name]) {
                                    languages[language.name]=[]
                                }
                                languages[language.name] << ([coder.name, day.name])
                            }
                        }
                    }
                }
            }
        }
        days.sort({k1, k2 -> k1.substring(3).toInteger() <=> k2.substring(3).toInteger()} as Comparator)
        new File(projectDir, "build/.").mkdirs()
        new File(projectDir, 'src/site/content/generated/.').mkdirs()
        def coderIndex = ""
        stats.coders = coders.size()
        coders.sort{it.key.toLowerCase()}.each { coder, data ->
            // * anoff
            def daysFile = new File(projectDir, "src/site/content/generated/coder/${coder}/generatedDays.adoc")
            new File(projectDir, "src/site/content/generated/coder/${coder}").mkdirs()
            daysFile.write("""
:jbake-type: page_toc
:jbake-title: $coder
:jbake-status: published

:toc: left

include::../../../config.adoc[]

== $coder

include::../../../../../../profiles/${coder}.adoc[]


""")
            coderIndex += "* link:../generated/coder/$coder/generatedDays.html[$coder]\n\n"
            data.sort{it[0]}.each { datum ->
                //=== Day 1
                //
                //include::../../day01/python/rdmueller/README.adoc[leveloffset=+2]
                def link = "${datum[0]}/${datum[1]}/${coder}/README.adoc"
                File readme = new File(link)
                def currentFolder = new File("${datum[0]}/${datum[1]}/${coder}/.")
                if (!readme.exists()) {
                    def text ="""
[small]#this documentation is autogenerated. Add a `README.adoc` to your solution to take over the control of this :-)#

== ${datum[1]}

"""
                currentFolder.eachFile { File file ->
                    text += """
.${file.canonicalPath-(currentFolder.canonicalPath+'/')}
[source]
....
include::${file.canonicalPath-(currentFolder.canonicalPath+'/')}[]
....
                    """
                }
                    readme.write(text)
                }
                if (readme.exists()) {
                    daysFile.append("=== Day ${datum[0]-"day"}: ${datum[1]}\n\n")
                    daysFile.append("include::../../../../../../${datum[0]}/${datum[1]}/${coder}/README.adoc[leveloffset=+2]\n\n")
                }
            }
        }
        new File(projectDir, 'src/site/content/generated/byCoder.adoc').write(coderIndex)
        def dayIndex = ""
        days.sort{it.key}.each { day, data ->
            def dayNum = (day - "day").replaceAll("^0", "")
            stats.days << dayNum
            dayIndex += """
=== Day ${day-"day"}

"""
            if (day!="day00") {
                dayIndex += """
The riddle for day ${day - "day"} can be found at https://adventofcode.com/2019/day/${(day - "day").replaceAll("^0", "")}.
"""
            }
            dayIndex += """
[cols="2"]
|===
"""
            def lastCoder = ""
            data.sort{it[0].toLowerCase()}.eachWithIndex { datum, i ->
                def coder = datum[0]
                def language = datum[1].replaceAll("[+]","p")
                dayIndex += """\
| ${lastCoder==coder?"":coder} | link:/generated/coder/${coder}/generatedDays.html#_day_${day-"day"}_${language}[$language]
"""
                dayNum = (day - "day").replaceAll("^0", "")
                if (lastCoder!=coder) {
                    if (!stats.stars[coder]) {
                        stats.stars[coder] = [:]
                    }
                    stats.stars[coder][dayNum]=1
                }
                lastCoder = coder
            }
            dayIndex += "|===\n"
        }



        new File('src/site/content/generated/byDay.adoc').write(dayIndex)
        def langIndex = ""
        stats.languages = languages.size()
        languages.sort{it.key.toLowerCase()}each { language, data ->
            langIndex += """
=== ${language}

[cols="2"]
|===
"""
            def lastDay = ""
            data.sort{it[1]}.eachWithIndex { datum, i ->
                def coder = datum[0]
                def day = datum[1]
                langIndex += """\
| ${lastDay==day?"":"Day "+(day-"day")} | link:/generated/coder/${coder}/generatedDays.html#_day_${day-"day"}_${language}[$coder]
"""
                lastDay = day
            }
            langIndex += "|===\n"
        }
        new File('src/site/content/generated/byLanguage.adoc').write(langIndex)

        def statsFile = """
= Stats and Leaderboard

Here are some stats for those who are interested.

The repository contains solutions in ${stats.languages} languages by ${stats.coders} developers.

[cols="${stats.days.size()+2}"]
|===
|Developer ^| ${stats.days.collect{"Day $it"}.join(' ^| ')} ^| Sum
"""
        def emojis=['👋','🕯','🎄','🎶','❄','🔔','🧦','☃','🕯🕯','🎁','🎄','🔔','☃','❄','⛪','🕯🕯🕯','🦌','🧝','🤶','🎄','☃','❄','🕯🕯🕯🕯','🎶','🎅','👪👼🦌']
        stats.stars.sort{e1, e2 -> e2.value.size() <=> e1.value.size()}.each{ coder, stars ->
            statsFile += "a|link:/generated/coder/${coder}/generateddays[$coder] ^| ${stats.days.collect{ stars[it]?emojis[it as Integer]:'-' }.join(' ^| ')} ^| ${stars.size()}\n"
        }
        statsFile += """
|===
"""
        new File('src/site/content/generated/stats.adoc').write(statsFile)

        def userInfo = ""
        stats.stars.each {coder, stars->
            File coderProfile = new File("./profiles/${coder}.adoc")
            if (!coderProfile.exists()) {
                def api = "https://api.github.com/users/"
                def res = []
                try {
                    res = new JsonSlurper().parseText(new URL(api + coder).text)
                } catch (Exception e) {
                    println "couldn't read $coder : $e"
                }
                coderProfile.write("""
:${coder}-avatar: ${res['avatar_url']}
:${coder}-twitter: -
:${coder}-realName: ${res['name']}
:${coder}-blog: -


//tag::free-form[]

[cols="1,5"]
|===
| image:{${coder}-avatar}[]
a| **$coder** +
//{${coder}-realName} +
icon:github[]: ${res['html_url']}[${coder}]
ifeval::[{${coder}-twitter} != -]
  icon:twitter[] : https://twitter.com/{${coder}-twitter}[${coder}-twitter] +
endif::[]
ifeval::[{${coder}-blog} != -]
  Blog : {${coder}-blog} 
endif::[]
|===

=== About me

Nothing here yet. Update your profile at https://github.com/docToolchain/aoc-2019/blob/master/profiles/${coder}.adoc[/profiles/${coder}.adoc] 

//end::free-form[]

""")
            }
        }
    }
}
